# JMH version: 1.21
# VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
# VM invoker: C:\Program Files\Java\jdk-10.0.1\bin\java.exe
# VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\lib\idea_rt.jar=56923:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\bin -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: cleandirty.map.MapIteratorJmh.entrySetIterator

# Run progress: 0.00% complete, ETA 00:08:00
# Fork: 1 of 2
# Warmup Iteration   1: 0.024 ops/ms
# Warmup Iteration   2: 0.025 ops/ms
# Warmup Iteration   3: 0.027 ops/ms
Iteration   1: 0.026 ops/ms
Iteration   2: 0.024 ops/ms
Iteration   3: 0.024 ops/ms
Iteration   4: 0.022 ops/ms
Iteration   5: 0.024 ops/ms
Iteration   6: 0.023 ops/ms
Iteration   7: 0.026 ops/ms
Iteration   8: 0.025 ops/ms
Iteration   9: 0.023 ops/ms
Iteration  10: 0.015 ops/ms

# Run progress: 16.67% complete, ETA 00:07:34
# Fork: 2 of 2
# Warmup Iteration   1: 0.019 ops/ms
# Warmup Iteration   2: 0.026 ops/ms
# Warmup Iteration   3: 0.027 ops/ms
Iteration   1: 0.027 ops/ms
Iteration   2: 0.027 ops/ms
Iteration   3: 0.024 ops/ms
Iteration   4: 0.026 ops/ms
Iteration   5: 0.026 ops/ms
Iteration   6: 0.026 ops/ms
Iteration   7: 0.027 ops/ms
Iteration   8: 0.027 ops/ms
Iteration   9: 0.028 ops/ms
Iteration  10: 0.028 ops/ms


Result "cleandirty.map.MapIteratorJmh.entrySetIterator":
  0.025 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (0.015, 0.025, 0.028), stdev = 0.003
  CI (99.9%): [0.022, 0.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
# VM invoker: C:\Program Files\Java\jdk-10.0.1\bin\java.exe
# VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\lib\idea_rt.jar=56923:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\bin -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: cleandirty.map.MapIteratorJmh.keysIterator

# Run progress: 33.33% complete, ETA 00:06:01
# Fork: 1 of 2
# Warmup Iteration   1: 0.027 ops/ms
# Warmup Iteration   2: 0.026 ops/ms
# Warmup Iteration   3: 0.025 ops/ms
Iteration   1: 0.025 ops/ms
Iteration   2: 0.026 ops/ms
Iteration   3: 0.026 ops/ms
Iteration   4: 0.027 ops/ms
Iteration   5: 0.027 ops/ms
Iteration   6: 0.026 ops/ms
Iteration   7: 0.024 ops/ms
Iteration   8: 0.026 ops/ms
Iteration   9: 0.024 ops/ms
Iteration  10: 0.026 ops/ms

# Run progress: 50.00% complete, ETA 00:04:30
# Fork: 2 of 2
# Warmup Iteration   1: 0.026 ops/ms
# Warmup Iteration   2: 0.027 ops/ms
# Warmup Iteration   3: 0.027 ops/ms
Iteration   1: 0.027 ops/ms
Iteration   2: 0.028 ops/ms
Iteration   3: 0.028 ops/ms
Iteration   4: 0.027 ops/ms
Iteration   5: 0.027 ops/ms
Iteration   6: 0.028 ops/ms
Iteration   7: 0.027 ops/ms
Iteration   8: 0.027 ops/ms
Iteration   9: 0.027 ops/ms
Iteration  10: 0.027 ops/ms


Result "cleandirty.map.MapIteratorJmh.keysIterator":
  0.026 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.024, 0.026, 0.028), stdev = 0.001
  CI (99.9%): [0.025, 0.027] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
# VM invoker: C:\Program Files\Java\jdk-10.0.1\bin\java.exe
# VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\lib\idea_rt.jar=56923:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\bin -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: cleandirty.map.MapIteratorJmh.valuesIterator

# Run progress: 66.67% complete, ETA 00:02:59
# Fork: 1 of 2
# Warmup Iteration   1: 0.027 ops/ms
# Warmup Iteration   2: 0.026 ops/ms
# Warmup Iteration   3: 0.026 ops/ms
Iteration   1: 0.027 ops/ms
Iteration   2: 0.026 ops/ms
Iteration   3: 0.027 ops/ms
Iteration   4: 0.026 ops/ms
Iteration   5: 0.027 ops/ms
Iteration   6: 0.027 ops/ms
Iteration   7: 0.028 ops/ms
Iteration   8: 0.027 ops/ms
Iteration   9: 0.027 ops/ms
Iteration  10: 0.027 ops/ms

# Run progress: 83.33% complete, ETA 00:01:29
# Fork: 2 of 2
# Warmup Iteration   1: 0.027 ops/ms
# Warmup Iteration   2: 0.027 ops/ms
# Warmup Iteration   3: 0.027 ops/ms
Iteration   1: 0.025 ops/ms
Iteration   2: 0.026 ops/ms
Iteration   3: 0.026 ops/ms
Iteration   4: 0.026 ops/ms
Iteration   5: 0.027 ops/ms
Iteration   6: 0.027 ops/ms
Iteration   7: 0.028 ops/ms
Iteration   8: 0.029 ops/ms
Iteration   9: 0.029 ops/ms
Iteration  10: 0.029 ops/ms


Result "cleandirty.map.MapIteratorJmh.valuesIterator":
  0.027 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.025, 0.027, 0.029), stdev = 0.001
  CI (99.9%): [0.026, 0.028] (assumes normal distribution)


# Run complete. Total time: 00:08:57

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt  Score   Error   Units
MapIteratorJmh.entrySetIterator  thrpt   20  0.025 ± 0.003  ops/ms
MapIteratorJmh.keysIterator      thrpt   20  0.026 ± 0.001  ops/ms
MapIteratorJmh.valuesIterator    thrpt   20  0.027 ± 0.001  ops/ms
